//gitflow+maven : Version 1.8.0
// Set MVN_PROJECT_ROOT to the directory were your projects root pom lies and you are ready to go
pipeline {
    agent any
    options { buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '365', numToKeepStr: '10') }
    tools {
        maven 'maven-3.6'
        jdk 'jdk-17'
    }
    environment {
        //Goals:
        // - When on develop or feature branch append branch name to version number and generate always SNAPSHOT dependencies
        // - When on master use raw version number from pom.xml and don't generate SNAPSHOT dependencies
        //Remarks:
        // - requires mvn deploy plugin 2.8.2 or later to work properly.
        // - requires maven-flatten-plugin to resolve $revision correctly

        //ROOT directory of project directory. Configure to match your project's structure
        MVN_PROJECT_ROOT = './neo4j-rdf-converter/'
        MVN_ADDITIONAL_ARGUMENTS = ''
        VERSION_SPOTBUGS_PLUGIN = '4.2.0'
        VERSION_PMD_PLUGIN = '3.14.0'

        //configure release to git-stage. release to git is only executed on master.
        // if turned on make sure jenkins doesn't build for commit that were created by itself. See: https://project.derivo.de/openproject/projects/jenkinsfile/wiki/release-to-git
        RELEASE_TO_GIT = false
        //which file should be deployed. Note: We deploy the first file matching the glob!
        RELEASE_TO_GIT_ARTIFACT_GLOB = 'target/*-jar-with-dependencies.jar'
        //file under which the artifact is published
        RELEASE_TO_GIT_OUTPUT_ARTIFACT = 'current/output.jar'

        // Want to use branch name inside mvn's version. Inside the version '/' is forbidden therefore it's replaced through '-'
        NORMALIZED_BRANCH_NAME = "${BRANCH_NAME.replaceAll('/', '-')}"
        // Don't generate SNAPSHOT version when on master
        CHANGELIST = "${BRANCH_NAME == 'master' ? '' : '-SNAPSHOT'}"
        // Don't append branch's name when on master
        SHA1 = "${BRANCH_NAME == 'master' ? '' : '-' + NORMALIZED_BRANCH_NAME}"

        /**
         * Local repository to prevent conflicts between builds. (The directory is deleted in a post action)
         */
        MVN_REPOSITORY = ".repository"

        //JVM argument's for all build steps
        MVN_ARGS = "--no-transfer-progress -Dchangelist=${CHANGELIST} -Dsha1=${SHA1} -Dmaven.repo.local=${MVN_REPOSITORY} ${MVN_ADDITIONAL_ARGUMENTS}"
        //Create a custom maven build command that takes the project dir and the mvn arguments into consideration.
        // So we can use it like ${MVN} package in the different build steps
        MVN = "mvn -f ${MVN_PROJECT_ROOT}/pom.xml ${MVN_ARGS}"
    }
    stages {
        stage('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                    echo "NORMALIZED_BRANCH_NAME = ${NORMALIZED_BRANCH_NAME}"
                    echo "CHANGELIST = ${CHANGELIST}"
                    echo "SHA1 = ${SHA1}"
                    echo "MVN_ARGS = ${MVN_ARGS}"
                    echo "MVN_PROJECT_ROOT = ${MVN_PROJECT_ROOT}"
                    echo "MVN = ${MVN}"
                '''
            }
        }

        stage('Build') {
            steps {
                sh '${MVN} -DskipTests=true clean package -U'
            }
            post {
                success {
                    archive '**/target/*.jar'
                }
            }
        }

        //stage('Analyze') {
        //    steps {
        //        sh '''${MVN} -DskipTests=true compile -U \
        //               com.github.spotbugs:spotbugs-maven-plugin:${VERSION_SPOTBUGS_PLUGIN}:spotbugs \
        //               org.apache.maven.plugins:maven-pmd-plugin:${VERSION_PMD_PLUGIN}:pmd \
        //               org.apache.maven.plugins:maven-pmd-plugin:${VERSION_PMD_PLUGIN}:cpd
        //           '''
        //        recordIssues enabledForFailure: true, tool: spotBugs()
        //        recordIssues enabledForFailure: true, tool: cpd(pattern: '**/target/cpd.xml')
        //        recordIssues enabledForFailure: true, tool: pmdParser(pattern: '**/target/pmd.xml')
        //    }
        //}

        stage('Test') {
            steps {
                warnError('Tests failed') {
                    sh '${MVN} -DskipTests=false test'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/**/*.xml'
                }
            }
        }

        stage('Deploy') {
            when {
                equals expected: 'SUCCESS', actual: currentBuild.currentResult
            }
            steps {
                sh '${MVN} -DskipTests=true clean deploy -P deployToInternal'
            }
        }

        stage("Release master to git") {
            //release to git
            when {
                allOf {
                    branch 'master';
                    environment name: 'RELEASE_TO_GIT', value: 'true'
                }
            }
            environment {
                GIT_AUTH = credentials('openprojectjenkins')
            }
            steps {
                sh('''
                    #create deploy directory
                    DEPLOY_DIR=$(dirname "${RELEASE_TO_GIT_OUTPUT_ARTIFACT}")
                    mkdir -p ${DEPLOY_DIR}
                    VERSION=$(${MVN} help:evaluate -Dexpression=project.version -q -DforceStdout)
                    #copy first file matching the pattern. 
                    # it is not possible to determine the filename beforehand because the filename changes wether or not 
                    # it's a beta release or not.
                    file="$(set -- ${RELEASE_TO_GIT_ARTIFACT_GLOB}; echo $1)"
                    cp "$file" "${RELEASE_TO_GIT_OUTPUT_ARTIFACT}"
                    echo "Version: ${VERSION}" > ${DEPLOY_DIR}/VERSION.md
                    git checkout -B $BRANCH_NAME
                    git add current/*
                    git commit -m "updated ${RELEASE_TO_GIT_OUTPUT_ARTIFACT} to version v${VERSION}"
                    set +x
                    git config --local credential.helper "!f() { echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }; f"
                    git push origin HEAD:$BRANCH_NAME
                    set -x
                ''')
            }
        }
    }

    post {
        always {
            /**
             * remove temporary mvn repository
             **/
            sh 'rm -rf ${MVN_REPOSITORY}'
            deleteDir()
        }
    }
}
